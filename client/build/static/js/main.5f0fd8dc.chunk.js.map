{"version":3,"sources":["components/homepage/NavBarComp.jsx","components/homepage/WelcomeComp.jsx","components/homepage/SectionOneComp.jsx","components/homepage/Section2Comp.jsx","components/homepage/Section3Comp.jsx","pages/HomePage.jsx","components/loginpage/ExistingFormComp.jsx","pages/LoginPage.jsx","components/loginpage/RegisterFormComp.jsx","pages/NewUserPage.jsx","api/TestNetGetAccountAPI.jsx","api/TestnetTransactAPI.jsx","api/MakeNewKeysAPI.jsx","pages/testnet/TestnetDashPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["props","useState","show","setShow","navigate","useNavigate","handleItemClick","e","console","log","target","id","className","onClick","Dropdown","Menu","variant","Item","eventKey","Divider","style","Button","size","Carousel","fade","Caption","NavBarComp","WelcomeComp","SectionOneComp","Section2Comp","Section3Comp","submit","schema","yup","shape","username","required","password","validationSchema","onSubmit","handleSubmit","initialValues","handleChange","values","handleBlur","errors","touched","isValid","Form","noValidate","Row","Group","as","Col","md","controlId","Label","InputGroup","hasValidation","Text","Control","type","placeholder","name","value","onChange","isInvalid","Feedback","muted","to","ExistingFormComp","res","firstName","lastName","email","terms","oneOf","Check","label","feedback","feedbackType","RegisterFormComp","TestnetGetAccountAPI","response","pubKey","useEffect","axios","get","then","data","balances","balance","catch","err","TestnetTransactAPI","srcKeyPair","srcPubKey","srcSecret","amnt","reciever","StellarSdk","require","fee","BASE_FEE","server","Server","Keypair","fromSecret","publicKey","loadAccount","NotFoundError","Error","srcAcct","transaction","TransactionBuilder","networkPassphrase","Networks","TESTNET","addOperation","Operation","payment","destination","asset","Asset","native","amount","setTimeout","build","sign","submitTransaction","pair","random","secret","encodeURIComponent","request","keyPair","setKeyPair","keyPair2","setKeyPair2","setBalance","balance2","setBalance2","guest1","guest2","public","private","slots","setSlots","tradeAmnt","setTradeAmnt","length","MakeNewKeysAPI","parseFloat","toFixed","FormControl","min","App","exact","path","element","NewUserPage","LoginPage","TestnetDashPage","HomePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f0fd8dc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport \"../../styles/compStyles/navbar.css\";\r\nexport default props => {\r\n    const [show,setShow] = useState(false);\r\n    const navigate = useNavigate();\r\n    const handleMenuClick = () => {\r\n        setShow(!show);\r\n    }\r\n    const handleItemClick = e => {\r\n        console.log(e.target)\r\n        if (e.id === 'nav1'){\r\n            navigate('/home');\r\n        } \r\n        if (e.id === 'nav2') {\r\n            navigate('/login/new');\r\n        }\r\n        if (e.id === 'nav3') {\r\n            navigate('/login');\r\n        }\r\n        if (e.id === 'nav4') {\r\n            navigate('/preview');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"navbarwrap\">\r\n                <div className=\"topbar\"></div>\r\n                <button className=\"navdropdown dropdown\" onClick={handleMenuClick}>\r\n                    <div className=\"navtitlewrap\">\r\n                        {/* Navbar.Brand for icon */}\r\n                        <h1 className=\"navtitle\">StellarMe</h1>\r\n                    </div>\r\n                    {show ? \r\n                    <Dropdown.Menu show variant=\"dark\" className=\"dropmenu\" id=\"menu\">\r\n                        <Dropdown.Item eventKey=\"1\" id=\"nav1\" onClick={e=>handleItemClick(e.target)}>Home</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"2\" id=\"nav2\" onClick={e=>handleItemClick(e.target)}>Register</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"3\" id=\"nav3\" onClick={e=>handleItemClick(e.target)}>Login</Dropdown.Item>\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.Item eventKey=\"4\" id=\"nav4\" onClick={e=>handleItemClick(e.target)}>Preview</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                    : \r\n                    <Dropdown.Menu variant=\"dark\" className=\"dropmenu\" id=\"menu\">\r\n                        <Dropdown.Item eventKey=\"1\" id=\"nav1\" onClick={e=>handleItemClick(e.target)}>Home</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"2\" id=\"nav2\" onClick={e=>handleItemClick(e.target)}>Register</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"3\" id=\"nav3\" onClick={e=>handleItemClick(e.target)}>Login</Dropdown.Item>\r\n                        <Dropdown.Divider />\r\n                        <Dropdown.Item eventKey=\"4\" id=\"nav4\" onClick={e=>handleItemClick(e.target)}>Preview</Dropdown.Item>\r\n                    </Dropdown.Menu>}\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport \"../../styles/compStyles/welcomeStyle.css\";\r\nexport default props => {\r\n    return (\r\n        <>\r\n            <div className=\"welcomewrap\">\r\n                <div className=\"welcomelogowrap\">\r\n                    <div style={{ \"height\": \"100px\", \"width\": \"100px\", \"border\": \"3px solid black\",\"backgroundColor\":\"grey\" }}>\r\n                    </div>\r\n                </div>\r\n                <div className=\"welcomebtns\">\r\n                    <Button variant=\"primary\" size=\"md\">\r\n                        Get Started\r\n                    </Button>\r\n                    <Button variant=\"secondary\" size=\"md\">\r\n                        Learn More\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport \"../../styles/compStyles/section1Style.css\";\r\nexport default props => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"sec1container\">\r\n            <Carousel fade className=\"carousel1\">\r\n                <Carousel.Item>\r\n                    {/* img can go here */}\r\n                    <div className=\"carouselslide\"></div>\r\n                    <Carousel.Caption>\r\n                        <h3>First slide label</h3>\r\n                        <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    {/* img can go here */}\r\n                    <div className=\"carouselslide\"></div>\r\n                    <Carousel.Caption>\r\n                        <h3>Second slide label</h3>\r\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <div className=\"carouselslide\"></div>\r\n                    <Carousel.Caption>\r\n                        <h3>Third slide label</h3>\r\n                        <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n            </Carousel>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport \"../../styles/compStyles/section2Style.css\";\r\nexport default props => {\r\n    return (\r\n        <>\r\n        <div className=\"sec2container\">\r\n            <p className=\"sec2text\">\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit.\r\n            Ducimus possimus et eveniet, voluptates facilis minus corporis tempora.\r\n            </p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport \"../../styles/compStyles/section3Style.css\";\r\nexport default props => {\r\n    return (\r\n        <>\r\n        <div className=\"sec3container\">\r\n        \r\n        </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport NavBarComp from \"../components/homepage/NavBarComp\";\r\nimport WelcomeComp from \"../components/homepage/WelcomeComp\";\r\nimport SectionOneComp from \"../components/homepage/SectionOneComp\";\r\nimport Section2Comp from \"../components/homepage/Section2Comp\";\r\nimport Section3Comp from \"../components/homepage/Section3Comp\";\r\nimport \"../styles/pageStyles/homeStyle.css\"\r\nexport default props => {\r\n    return (\r\n        <>\r\n        <NavBarComp />\r\n        <WelcomeComp />\r\n        <SectionOneComp /> \r\n        <Section2Comp />\r\n        <Section3Comp />\r\n        </>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from 'yup';\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport \"../../styles/compStyles/registerFormStyle.css\";\r\n\r\nexport default props => {\r\n    const { submit } = props;\r\n    const [user, setUser] = useState('');\r\n\r\n    const schema = yup.object().shape({\r\n        username: yup.string().required(),\r\n        password: yup.string().required(),\r\n    });\r\n    const handleSubmit = e => {\r\n        console.log(e)\r\n        submit(\"submitted\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"formwrap\">\r\n                <h1>Log In</h1>\r\n                <p>&nbsp;</p>\r\n                <Formik\r\n                    validationSchema={schema}\r\n                    onSubmit={(e) => handleSubmit(e)}\r\n                    initialValues={{\r\n                        username: '',\r\n                        password: '',\r\n                    }}>\r\n                    {({\r\n                        handleSubmit,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        values,\r\n                        touched,\r\n                        isValid,\r\n                        errors,\r\n                    }) => (\r\n                        <Form noValidate onSubmit={handleSubmit}>\r\n                            <Row>\r\n                                <Form.Group as={Col} md=\"4\" controlId=\"validationFormikUsername\">\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <InputGroup hasValidation>\r\n                                        <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Username\"\r\n                                            aria-describedby=\"inputGroupPrepend\"\r\n                                            name=\"username\"\r\n                                            value={values.username}\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.username} />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.username}\r\n                                        </Form.Control.Feedback>\r\n                                    </InputGroup>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row className=\"align-items-center\">\r\n                                <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"Password\"\r\n                                        name=\"password\"\r\n                                        value={values.password}\r\n                                        onChange={handleChange}\r\n                                        isInvalid={!!errors.password} />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {errors.password}\r\n                                    </Form.Control.Feedback>\r\n                                    <Form.Text id=\"passwordHelpBlock\" muted>\r\n                                        Your password must be 8-20 characters long, contain letters and numbers, and\r\n                                        must not contain spaces, special characters, or emoji.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <p>&nbsp;</p>\r\n                            <Button type=\"submit\">Submit</Button>\r\n                            <p>&nbsp;</p>\r\n                            <Link to=\"/login/new\">Don't have an account?</Link>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport ExistingFormComp from \"../components/loginpage/ExistingFormComp\";\r\nimport NavBarComp from \"../components/homepage/NavBarComp\";\r\nexport default props => {\r\n    const handleResponse = res => {\r\n        console.log(res)\r\n    }\r\n    return (\r\n        <>\r\n        <NavBarComp />\r\n        <ExistingFormComp submit={handleResponse}/>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from 'yup';\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport \"../../styles/compStyles/registerFormStyle.css\";\r\nimport { scryRenderedDOMComponentsWithClass } from \"react-dom/cjs/react-dom-test-utils.development\";\r\n\r\nexport default props => {\r\n    const { submit } = props;\r\n    const schema = yup.object().shape({\r\n        firstName: yup.string().required(),\r\n        lastName: yup.string().required(),\r\n        email: yup.string().required(),\r\n        username: yup.string().required(),\r\n        password: yup.string().required(),\r\n        terms: yup.bool().required().oneOf([true], 'Terms must be accepted'),\r\n    });\r\n    const handleSubmit = e => {\r\n        console.log(e.email)\r\n        submit('submitted')\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"formwrap\">\r\n                <h1>Register</h1>\r\n                <p>&nbsp;</p>\r\n                <Formik\r\n                    validationSchema={schema}\r\n                    onSubmit={(e) => handleSubmit(e)}\r\n                    initialValues={{\r\n                        firstName: 'Rod',\r\n                        lastName: 'Wave',\r\n                        email: '',\r\n                        username: '',\r\n                        password: '',\r\n                        terms: false,\r\n                    }}>\r\n                    {({\r\n                        handleSubmit,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        values,\r\n                        touched,\r\n                        isValid,\r\n                        errors,\r\n                    }) => (\r\n                        <Form noValidate onSubmit={handleSubmit}>\r\n                            <Row className=\"align-items-center\">\r\n                                <Form.Group as={Col} md=\"4\" controlId=\"validationFormik01\">\r\n                                    <Form.Label>First name</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        name=\"firstName\"\r\n                                        value={values.firstName}\r\n                                        onChange={handleChange}\r\n                                        isValid={touched.firstName && !errors.firstName} />\r\n                                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row>\r\n                                <Form.Group as={Col} md=\"4\" controlId=\"validationFormik02\">\r\n                                    <Form.Label>Last name</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        name=\"lastName\"\r\n                                        value={values.lastName}\r\n                                        onChange={handleChange}\r\n                                        isValid={touched.lastName && !errors.lastName} />\r\n                                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row>\r\n                                <Form.Group as={Col} md=\"4\" controlId=\"validationFormikUsername\">\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <InputGroup hasValidation>\r\n                                        <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Username\"\r\n                                            aria-describedby=\"inputGroupPrepend\"\r\n                                            name=\"username\"\r\n                                            value={values.username}\r\n                                            onChange={handleChange}\r\n                                            isInvalid={!!errors.username} />\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.username}\r\n                                        </Form.Control.Feedback>\r\n                                    </InputGroup>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row>\r\n                                <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"Email\"\r\n                                        name=\"email\"\r\n                                        value={values.email}\r\n                                        onChange={handleChange}\r\n                                        isInvalid={!!errors.email} />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {errors.email}\r\n                                    </Form.Control.Feedback>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row>\r\n                                <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"Password\"\r\n                                        name=\"password\"\r\n                                        value={values.password}\r\n                                        onChange={handleChange}\r\n                                        isInvalid={!!errors.password} />\r\n                                    <Form.Control.Feedback type=\"invalid\">\r\n                                        {errors.password}\r\n                                    </Form.Control.Feedback>\r\n                                    <Form.Text id=\"passwordHelpBlock\" muted>\r\n                                        Your password must be 8-20 characters long, contain letters and numbers, and\r\n                                        must not contain spaces, special characters, or emoji.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Row className=\"align-items-center\">\r\n                                <Form.Group className=\"mb-3\">\r\n                                    <Form.Check\r\n                                        required\r\n                                        name=\"terms\"\r\n                                        label=\"Agree to terms and conditions\"\r\n                                        onChange={handleChange}\r\n                                        isInvalid={!!errors.terms}\r\n                                        feedback={errors.terms}\r\n                                        feedbackType=\"invalid\"\r\n                                        id=\"validationFormik0\" />\r\n                                </Form.Group>\r\n                            </Row>\r\n                            <Button type=\"submit\">Submit</Button>\r\n                            <p>&nbsp;</p>\r\n                            <Link to=\"/login\">Already have an account?</Link>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport RegisterFormComp from \"../components/loginpage/RegisterFormComp\";\r\nimport NavBarComp from \"../components/homepage/NavBarComp\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default props => {\r\n    const handleResponse = res => {\r\n        console.log(res)\r\n    }\r\n    return (\r\n        <>\r\n        <NavBarComp />\r\n        <RegisterFormComp submit={handleResponse}/>\r\n        </>\r\n    )\r\n}","import axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\nconst TestnetGetAccountAPI = props => {\r\n    const { response, pubKey } = props;\r\n    useEffect(()=>{\r\n        axios.get(`https://horizon-testnet.stellar.org/accounts/${pubKey}`)\r\n            .then(res=>{\r\n                response(res.data.balances[0].balance)\r\n                console.log(res.data)})\r\n            .catch(err=>{console.log(err)})\r\n    },[pubKey])\r\n    return null\r\n}\r\nexport default TestnetGetAccountAPI;","import Button from \"react-bootstrap/Button\";\nimport { Networks } from \"stellar-sdk\";\n\nconst TestnetTransactAPI = props => {\n    const { srcSecret, amnt, reciever, response } = props;\n    const StellarSdk = require(\"stellar-sdk\");\n    const fee = StellarSdk.BASE_FEE;    \n    const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n    // test source account\n    // const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\n    // const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\n    \n    var srcKeyPair,srcPubKey;\n\n\n    // instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\n    try {\n        srcKeyPair = StellarSdk.Keypair.fromSecret(srcSecret);\n        srcPubKey = srcKeyPair.publicKey();\n    }\n    catch {\n        console.log(\"no keypair found\");\n    }\n\n    const handleClick = e => {\n        console.log(\"Fee: \",fee + \" Stroops\");\n        console.log(\"source key: \",srcSecret);\n        if (!srcPubKey){return console.log(\"no source key found\")}\n        console.log('initiated transaction...');\n\n        // check if destination account exists\n        server.loadAccount(reciever)\n            .catch(err=>{\n                if (err instanceof StellarSdk.NotFoundError) {\n                    throw new Error(\"destination does not exist!\");\n                } else return console.log(\"error!\");\n            })\n            .then(()=>{\n                return server.loadAccount(srcPubKey);\n            })\n            .then((srcAcct)=>{\n                const transaction = new StellarSdk.TransactionBuilder(\n                    srcAcct, { fee, networkPassphrase: Networks.TESTNET})\n                    // add a 'payment' operation\n                    .addOperation(StellarSdk.Operation.payment({\n                        destination: reciever,\n                        // need to specify 'native' so we can send Lumens\n                        asset: StellarSdk.Asset.native(),\n                        // Lumens are divisible by 7 decimal places. ex: 100.1234567\n                        amount: amnt,\n                    }),)\n                    // transation is valid for only 1 minute\n                    .setTimeout(60)\n                    // to add memo:\n                    // .addMemo(StellarSdk.Memo.text('Hello World!'))\n                    .build();\n                // source must sign the transaction with their keypair\n                transaction.sign(srcKeyPair);\n                \n                return server.submitTransaction(transaction);\n            })\n            .then(res=>{\n                response(amnt);\n                console.log(\"Success! Results: \",res);})\n            .catch(err=>{console.log(\"Something went wrong...\", err)})\n    }\n\n    return <Button onClick={handleClick}>Confirm</Button>\n}\nexport default TestnetTransactAPI;","import axios from \"axios\";\r\nimport StellarSdk from \"stellar-sdk\";\r\nimport Button from \"react-bootstrap/Button\";\r\nexport default props => {\r\n    const { response } = props;\r\n    const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\"); // connect to Horizon API\r\n\r\n    // pair.secret();\r\n    // pair.publicKey();\r\n    \r\n    // console.log(pair.canSign());\r\n    // console.log('public: ')\r\n    // console.log(pair.publicKey());\r\n    // console.log('secret: ')\r\n    // console.log(pair.secret());\r\n    const request = () => {\r\n        const pair = StellarSdk.Keypair.random(); // generate a new key pair\r\n        console.log(\"public key: \",pair.publicKey());\r\n        console.log(\"private key: \",pair.secret());\r\n        // testnet faucet; funds account with 10000 XLM and \r\n        axios.get(`https://friendbot.stellar.org?addr=${encodeURIComponent( \r\n            pair.publicKey(),\r\n        )}`)\r\n            .then(res => {\r\n                response({'public':pair.publicKey(),'private':pair.secret()}) // send response to parent component\r\n                console.log(\"SUCCESS! You have a new account :)\\n\", res.data)\r\n            })\r\n            .catch(err => console.log(\"error while creating account, \", err))\r\n    }\r\n    const handleClick = () => {\r\n        request();\r\n    }\r\n    return <Button onClick={handleClick}>Generate New Keys</Button>\r\n}\r\n\r\n// public: \r\n// GDQI2XSDRTOQPKUQATVKZHZ3HZNN33KRSKG5M2M4F7SW3XCU54PI7H6O\r\n\r\n// private:\r\n// SALV2QXVIWFTISFIJWPB3KOXDPQBLWJVZMCH545Q6GL4UHPTSEQ22UFW","import \"../../styles/pageStyles/testDashStyle.css\";\r\nimport TestnetGetAccountAPI from \"../../api/TestNetGetAccountAPI\";\r\nimport NavBarComp from \"../../components/homepage/NavBarComp\";\r\nimport TestnetTransactAPI from \"../../api/TestnetTransactAPI\";\r\nimport MakeNewKeysAPI from \"../../api/MakeNewKeysAPI.jsx\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default props => {\r\n    const StellarSdk = require(\"stellar-sdk\");\r\n    const fee = StellarSdk.BASE_FEE * 0.0000001; // fee counted in Stroops; 100 Stroops = 0.00001 XLM \r\n    const [keyPair, setKeyPair] = useState({ // guest1 KEY PAIR\r\n        'public': 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV',\r\n        'private': 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN' });\r\n    const [keyPair2,setKeyPair2] = useState({ // guest2 KEY PAIR\r\n        'public':'GDQI2XSDRTOQPKUQATVKZHZ3HZNN33KRSKG5M2M4F7SW3XCU54PI7H6O',\r\n        'private':'SALV2QXVIWFTISFIJWPB3KOXDPQBLWJVZMCH545Q6GL4UHPTSEQ22UFW'});\r\n    const [balance, setBalance] = useState(0); // guest1 BALANCE\r\n    const [balance2, setBalance2] = useState(0); // guest2 BALANCE\r\n    const guest1 = 'guest982'; // guest1 NAME\r\n    const guest2 = 'guest321'; // guest2 NAME\r\n    const [slots,setSlots] = useState({ // placement for trade demo\r\n        0:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance},\r\n        1:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2}});\r\n    const [tradeAmnt,setTradeAmnt] = useState(0); // number of XLM transferred\r\n    useEffect(()=>{ // useEffects update balances shown on the trade demo\r\n        slots[0].name === guest1 ?\r\n        setSlots({...slots,0:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance}})\r\n        :\r\n        setSlots({...slots,1:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance}})\r\n    }, [balance])\r\n    useEffect(()=>{\r\n        slots[0].name === guest2 ?\r\n        setSlots({...slots,0:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2}})\r\n        :\r\n        setSlots({...slots,1:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2}})\r\n    }, [balance2])\r\n    const generateNewKeys = res => {setKeyPair({...res});} // replace current keypairs with new ones\r\n    const generateNewKeys2 = res => {setKeyPair2({...res});}\r\n    const handleAccountReport = res => { // fetch balance from Horizon API\r\n        setBalance(res);}\r\n    const handleAccountReport2 = res => {\r\n        setBalance2(res);}\r\n    const handleTransaction2 = res => { // update balances from individual transactions\r\n        setBalance2((((parseFloat(balance2) + parseFloat(res)) * 100) / 100).toFixed(7));}\r\n    const handleTransaction = res => {\r\n        setBalance((((parseFloat(balance) + parseFloat(res)) * 100) / 100).toFixed(7));}\r\n    const handleSwapSlots = () => { // swap guest placements for trade demo; swapping sender and reciever.\r\n        if (slots[0].name === guest1) {\r\n            setSlots({0:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2},\r\n            1:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance}})} \r\n        else {\r\n            setSlots({0:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance},\r\n            1:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2}})}\r\n    }\r\n    const handleTradeDemo = res => { // update balances after trade demo\r\n        console.log(res);\r\n        slots[0].name === guest1 ?\r\n        <>\r\n        {setBalance((((parseFloat(balance) - parseFloat(res) - fee) * 100) / 100).toFixed(7))}\r\n        {setBalance2((((parseFloat(balance2) + parseFloat(res)) * 100) / 100).toFixed(7))}\r\n        </>\r\n        :\r\n        <>\r\n        {setBalance((((parseFloat(balance) + parseFloat(res)) * 100) / 100).toFixed(7))}\r\n        {setBalance2((((parseFloat(balance2) - parseFloat(res) - fee) * 100) / 100).toFixed(7))}\r\n        </>\r\n    }\r\n    return (\r\n        <>\r\n            <TestnetGetAccountAPI pubKey={keyPair2.public} response={handleAccountReport2} />\r\n            <TestnetGetAccountAPI pubKey={keyPair.public} response={handleAccountReport} />\r\n            <div className=\"testdashwrap\">\r\n                <div className=\"testdashtopfill\">\r\n                    <h1>Welcome, guest!</h1>\r\n                </div>\r\n                <NavBarComp />\r\n\r\n                {/* key pair for guest1 */}\r\n                <div className=\"addresses testusercard\">\r\n                    <div className=\"hr hr-t\" />\r\n                    <h2>@{guest1}'s testnet key pair:</h2>\r\n                    {/* public */}\r\n                    <h6>public: </h6>\r\n                    {keyPair.public.length === 0 ?\r\n                        <p>none</p>\r\n                        : <div className=\"testkey\">{keyPair.public}</div>}\r\n                    {/* private */}\r\n                    <h6>private: </h6>\r\n                    {keyPair.private.length === 0 ?\r\n                        <p>none</p>\r\n                        : <div className=\"testkey\">{keyPair.private}</div>}\r\n                    <MakeNewKeysAPI response={generateNewKeys} className=\"newkeysplz\" />\r\n                    <div className=\"hr hr-b\" />\r\n                </div>\r\n\r\n                {/* key pair for guest2 */}\r\n                <div className=\"addresses testusercard\">\r\n                    <div className=\"hr hr-t\" />\r\n                    <h2>@{guest2}'s testnet key pair:</h2>\r\n                    {/* public */}\r\n                    <h6>public: </h6>\r\n                    {keyPair2.public.length === 0 ?\r\n                        <p>none</p>\r\n                        : <div className=\"testkey\">{keyPair2.public}</div>}\r\n                    {/* private */}\r\n                    <h6>private: </h6>\r\n                    {keyPair2.private.length === 0 ?\r\n                        <p>none</p>\r\n                        : <div className=\"testkey\">{keyPair2.private}</div>}\r\n                    <MakeNewKeysAPI response={generateNewKeys2} className=\"newkeysplz\" />\r\n                    <div className=\"hr hr-b\" />\r\n                </div>\r\n\r\n                {/* balance for guest1 */}\r\n                <div className=\"testusercard testnetaccountinfo\">\r\n                    <div className=\"hr hr-t\" />\r\n                    <h2>Balance for @{guest1}</h2>\r\n                    {keyPair.public.length !== 0 ?\r\n                    <>\r\n                    <div>{balance} XLM</div>\r\n                    <h3>add 100 XML to your balance?</h3>\r\n                    <TestnetTransactAPI reciever={keyPair.public} response={handleTransaction} amnt='100'\r\n                    srcSecret={'SA4JSHUECQ4S5ECT6LGSMQPM467CDNBNAGBVFMDCNSMYUJW3ZXQNWE5O'}/>\r\n                    </>\r\n                    : <p>Generate Key Pairs!</p>}\r\n                    <div className=\"hr hr-b\" />\r\n                </div>\r\n\r\n                {/* balance for guest2 */}\r\n                <div className=\"testusercard testnetaccountinfo\">\r\n                    <div className=\"hr hr-t\" />\r\n                    <h2>Balance for @{guest2}</h2>\r\n                    {keyPair2.public.length !== 0 ?\r\n                    <>\r\n                    <div>{balance2} XLM</div>\r\n                    <h3>add 100 XML to your balance?</h3>\r\n                    <TestnetTransactAPI reciever={keyPair2.public} response={handleTransaction2} amnt='100' \r\n                    srcSecret={'SA4JSHUECQ4S5ECT6LGSMQPM467CDNBNAGBVFMDCNSMYUJW3ZXQNWE5O'}/>\r\n                    </>\r\n                    : <p>Generate Key Pairs!</p>}\r\n                    <div className=\"hr hr-b\" />\r\n                </div>\r\n\r\n                {/* make a trade */}\r\n                <div className=\"testusercard testnettransactpreview\">\r\n                    <div className=\"hr hr-t\" />\r\n                    <h2>Make A Trade!</h2>\r\n                    <div>@{slots[0].name} Balance: XLM {slots[0].balance}</div>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            min=\"1\"\r\n                            type=\"number\"\r\n                            value={tradeAmnt}\r\n                            onChange={e=>setTradeAmnt(e.target.value)}\r\n                            aria-label=\"Default\"\r\n                            aria-describedby=\"inputGroup-sizing-default\"/>\r\n                    <InputGroup.Text id=\"inputGroup-sizing-default\">XLM</InputGroup.Text>\r\n                    <Button onClick={handleSwapSlots}>swap</Button>\r\n                    </InputGroup>\r\n                    <div>@{slots[1].name} Balance: XLM {slots[1].balance}</div>\r\n                    {keyPair.public.length < 1 || keyPair2.public.length < 1 ?\r\n                    <h3>Generate Key Pairs First!</h3>\r\n                    :\r\n                    <TestnetTransactAPI \r\n                    srcSecret={slots[0].private}\r\n                    amnt={tradeAmnt}\r\n                    reciever={slots[1].public}\r\n                    response={handleTradeDemo}\r\n                    />}\r\n                    <div className=\"hr hr-b\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import './App.css';\nimport { Routes, Route, Link, Navigate } from \"react-router-dom\";\nimport HomePage from './pages/HomePage';\nimport LoginPage from './pages/LoginPage';\nimport NewUserPage from './pages/NewUserPage';\nimport TestnetDashPage from './pages/testnet/TestnetDashPage';\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Routes>\n        <Route exact path=\"login/new\" element={<NewUserPage/>}/>\n        <Route exact path=\"login\" element={<LoginPage/>}/>\n        <Route exact path=\"preview\" element={<TestnetDashPage/>}/>\n        <Route exact path=\"home\" element={<HomePage/>} />\n        <Route path=\"/\" element={<Navigate to=\"/home\"/>} />\n      </Routes>\n      <Link to=\"/login\">Login</Link>{\" | \"}\n      <Link to=\"/login/new\">Register</Link>{' | '}\n      <Link to=\"/home\">Home</Link>{\" | \"}\n      <Link to=\"/preview\">Preview</Link>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}