{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acost\\\\Desktop\\\\StellarMe\\\\client\\\\src\\\\api\\\\TestnetTransactAPI.jsx\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport { Networks } from \"stellar-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TestnetTransactAPI = props => {\n  const StellarSdk = require(\"stellar-sdk\"); // destination account, in this case the user\n\n\n  const {\n    reciever\n  } = props; // source account\n\n  const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\n  const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\n  const srcKeyPair = StellarSdk.Keypair.fromSecret(srcSecKey);\n  const amnt = '100.000'; // fetch base fee\n\n  const fee = StellarSdk.BASE_FEE; // instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\n\n  const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\"); // || these are deprecated, refer to: https://git.io/fj9fG\n  // StellarSdk.Network.usePublicNetwork();\n  // StellarSdk.Network.useTestNetwork();\n\n  const handleClick = e => {\n    // check if destination account exists\n    server.loadAccount(reciever).catch(err => {\n      if (err instanceof StellarSdk.NotFoundError) {\n        throw new Error(\"destination does not exist!\");\n      } else return err;\n    }).then(() => {\n      server.loadAccount(srcPubKey);\n    }).then(srcAccount => {\n      const transaction = new StellarSdk.TransactionBuilder(srcAccount, {\n        fee,\n        networkPassphrase: Networks.TESTNET\n      }) // add a 'payment' operation\n      .addOperation(StellarSdk.Operation.payment({\n        destination: reciever,\n        // need to specify 'native' so we can send Lumens\n        asset: StellarSdk.Asset.native(),\n        // Lumens are divisible by 7 decimal places. ex: 100.1234567\n        amount: amnt\n      })) // transation is valid for only 1 minute\n      .setTimout(60) // to add memo:\n      // .addMemo(StellarSdk.Memo.text('Hello World!'))\n      .build();\n    }); // source must sign the transaction with their keypair\n\n    transaction.sign(srcKeyPair);\n    console.log(transaction.toEnvelope().toXDR('base64')); // submit transaction to Horizon server\n    // try {\n    //     const transactionRes = await server.submitTransation(transaction);\n    //     console.log(JSON.stringify(transactionRes, null, 2));\n    //     console.log('\\nSuccess! View the transaction at: ');\n    //     console.log(transactionResult._links.transaction.href);\n    // } catch (err) {\n    //     console.log('An error has occured');\n    //     console.log(err);\n    // }\n\n    const transactionRes = axios.get(server.submitTransation(transaction)).then(res => {\n      console.log('\\nSuccess! View the transaction at: ');\n      console.log(transactionRes._links.transaction.href);\n      console.log(res.data, null, 2);\n    }).catch(err => console.log('An error has occurred', err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick,\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_c = TestnetTransactAPI;\nexport default TestnetTransactAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestnetTransactAPI\");","map":{"version":3,"sources":["C:/Users/acost/Desktop/StellarMe/client/src/api/TestnetTransactAPI.jsx"],"names":["Button","axios","Networks","TestnetTransactAPI","props","StellarSdk","require","reciever","srcPubKey","srcSecKey","srcKeyPair","Keypair","fromSecret","amnt","fee","BASE_FEE","server","Server","handleClick","e","loadAccount","catch","err","NotFoundError","Error","then","srcAccount","transaction","TransactionBuilder","networkPassphrase","TESTNET","addOperation","Operation","payment","destination","asset","Asset","native","amount","setTimout","build","sign","console","log","toEnvelope","toXDR","transactionRes","get","submitTransation","res","_links","href","data"],"mappings":"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","sourcesContent":["\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport { Networks } from \"stellar-sdk\";\r\nconst TestnetTransactAPI = props => {\r\n    const StellarSdk = require(\"stellar-sdk\");\r\n    // destination account, in this case the user\r\n    const { reciever } = props;\r\n    // source account\r\n    const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\r\n    const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\r\n    const srcKeyPair = StellarSdk.Keypair.fromSecret(srcSecKey);\r\n    const amnt = '100.000';\r\n    // fetch base fee\r\n    const fee = StellarSdk.BASE_FEE;    \r\n    // instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\r\n    const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\r\n\r\n    // || these are deprecated, refer to: https://git.io/fj9fG\r\n    // StellarSdk.Network.usePublicNetwork();\r\n    // StellarSdk.Network.useTestNetwork();\r\n\r\n\r\n\r\n    const handleClick = e => {\r\n        // check if destination account exists\r\n        server.loadAccount(reciever)   \r\n            .catch(err=>{\r\n                if (err instanceof StellarSdk.NotFoundError) {\r\n                    throw new Error(\"destination does not exist!\");\r\n                } else return err;\r\n            })\r\n            .then(()=>{\r\n                server.loadAccount(srcPubKey);\r\n            })\r\n            .then(srcAccount=>{\r\n                const transaction = new StellarSdk.TransactionBuilder(\r\n                    srcAccount, { fee, networkPassphrase: Networks.TESTNET})\r\n                    // add a 'payment' operation\r\n                    .addOperation(StellarSdk.Operation.payment({\r\n                        destination: reciever,\r\n                        // need to specify 'native' so we can send Lumens\r\n                        asset: StellarSdk.Asset.native(),\r\n                        // Lumens are divisible by 7 decimal places. ex: 100.1234567\r\n                        amount: amnt,\r\n                    }),)\r\n                    // transation is valid for only 1 minute\r\n                    .setTimout(60)\r\n                    // to add memo:\r\n                    // .addMemo(StellarSdk.Memo.text('Hello World!'))\r\n                    .build();\r\n\r\n            })\r\n\r\n        // source must sign the transaction with their keypair\r\n        transaction.sign(srcKeyPair);\r\n\r\n        console.log(transaction.toEnvelope().toXDR('base64'));\r\n\r\n        // submit transaction to Horizon server\r\n        // try {\r\n        //     const transactionRes = await server.submitTransation(transaction);\r\n        //     console.log(JSON.stringify(transactionRes, null, 2));\r\n        //     console.log('\\nSuccess! View the transaction at: ');\r\n        //     console.log(transactionResult._links.transaction.href);\r\n        // } catch (err) {\r\n        //     console.log('An error has occured');\r\n        //     console.log(err);\r\n        // }\r\n        const transactionRes = axios.get(server.submitTransation(transaction))\r\n            .then(res => {\r\n                console.log('\\nSuccess! View the transaction at: ');\r\n                console.log(transactionRes._links.transaction.href);\r\n                console.log(res.data, null, 2);\r\n            })\r\n            .catch(err => console.log('An error has occurred', err))\r\n    }\r\n\r\n    return (<>\r\n        <Button onClick={handleClick}>Confirm</Button>\r\n    </>)\r\n}\r\nexport default TestnetTransactAPI;"]},"metadata":{},"sourceType":"module"}