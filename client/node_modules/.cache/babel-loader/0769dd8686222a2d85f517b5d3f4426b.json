{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acost\\\\Desktop\\\\StellarMe\\\\client\\\\src\\\\api\\\\TestnetTransactAPI.jsx\";\nimport Button from \"react-bootstrap/Button\";\nimport { Networks } from \"stellar-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TestnetTransactAPI = props => {\n  const StellarSdk = require(\"stellar-sdk\"); // destination account, in this case the user\n\n\n  const {\n    reciever,\n    response\n  } = props; // source account\n\n  const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\n  const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\n  const srcKeyPair = StellarSdk.Keypair.fromSecret(srcSecKey);\n  const amnt = '100.000'; // fetch base fee\n\n  const fee = StellarSdk.BASE_FEE; // instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\n\n  const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\"); // || these are deprecated, refer to: https://git.io/fj9fG\n  // StellarSdk.Network.usePublicNetwork();\n  // StellarSdk.Network.useTestNetwork();\n\n  const handleClick = e => {\n    // check if destination account exists\n    server.loadAccount(reciever).catch(err => {\n      if (err instanceof StellarSdk.NotFoundError) {\n        throw new Error(\"destination does not exist!\");\n      } else return err;\n    }).then(() => {\n      return server.loadAccount(srcPubKey);\n    }).then(srcAcct => {\n      const transaction = new StellarSdk.TransactionBuilder(srcAcct, {\n        fee,\n        networkPassphrase: Networks.TESTNET\n      }) // add a 'payment' operation\n      .addOperation(StellarSdk.Operation.payment({\n        destination: reciever,\n        // need to specify 'native' so we can send Lumens\n        asset: StellarSdk.Asset.native(),\n        // Lumens are divisible by 7 decimal places. ex: 100.1234567\n        amount: amnt\n      })) // transation is valid for only 1 minute\n      .setTimeout(60) // to add memo:\n      // .addMemo(StellarSdk.Memo.text('Hello World!'))\n      .build(); // source must sign the transaction with their keypair\n\n      transaction.sign(srcKeyPair);\n      return server.submitTransaction(transaction);\n    }).then(res => {\n      // response()\n      console.log(\"Success! Results: \", res);\n    }).catch(err => {\n      console.log(\"Something went wrong...\", err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick,\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_c = TestnetTransactAPI;\nexport default TestnetTransactAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestnetTransactAPI\");","map":{"version":3,"sources":["C:/Users/acost/Desktop/StellarMe/client/src/api/TestnetTransactAPI.jsx"],"names":["Button","Networks","TestnetTransactAPI","props","StellarSdk","require","reciever","response","srcPubKey","srcSecKey","srcKeyPair","Keypair","fromSecret","amnt","fee","BASE_FEE","server","Server","handleClick","e","loadAccount","catch","err","NotFoundError","Error","then","srcAcct","transaction","TransactionBuilder","networkPassphrase","TESTNET","addOperation","Operation","payment","destination","asset","Asset","native","amount","setTimeout","build","sign","submitTransaction","res","console","log"],"mappings":";AACA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;;;;AACA,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAChC,QAAMC,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B,CADgC,CAEhC;;;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBJ,KAA/B,CAHgC,CAIhC;;AACA,QAAMK,SAAS,GAAG,0DAAlB;AACA,QAAMC,SAAS,GAAG,0DAAlB;AACA,QAAMC,UAAU,GAAGN,UAAU,CAACO,OAAX,CAAmBC,UAAnB,CAA8BH,SAA9B,CAAnB;AACA,QAAMI,IAAI,GAAG,SAAb,CARgC,CAShC;;AACA,QAAMC,GAAG,GAAGV,UAAU,CAACW,QAAvB,CAVgC,CAWhC;;AACA,QAAMC,MAAM,GAAG,IAAIZ,UAAU,CAACa,MAAf,CAAsB,qCAAtB,CAAf,CAZgC,CAchC;AACA;AACA;;AAGA,QAAMC,WAAW,GAAGC,CAAC,IAAI;AACrB;AACAH,IAAAA,MAAM,CAACI,WAAP,CAAmBd,QAAnB,EACKe,KADL,CACWC,GAAG,IAAE;AACR,UAAIA,GAAG,YAAYlB,UAAU,CAACmB,aAA9B,EAA6C;AACzC,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACH,OAFD,MAEO,OAAOF,GAAP;AACV,KALL,EAMKG,IANL,CAMU,MAAI;AACN,aAAOT,MAAM,CAACI,WAAP,CAAmBZ,SAAnB,CAAP;AACH,KARL,EASKiB,IATL,CASWC,OAAD,IAAW;AACb,YAAMC,WAAW,GAAG,IAAIvB,UAAU,CAACwB,kBAAf,CAChBF,OADgB,EACP;AAAEZ,QAAAA,GAAF;AAAOe,QAAAA,iBAAiB,EAAE5B,QAAQ,CAAC6B;AAAnC,OADO,EAEhB;AAFgB,OAGfC,YAHe,CAGF3B,UAAU,CAAC4B,SAAX,CAAqBC,OAArB,CAA6B;AACvCC,QAAAA,WAAW,EAAE5B,QAD0B;AAEvC;AACA6B,QAAAA,KAAK,EAAE/B,UAAU,CAACgC,KAAX,CAAiBC,MAAjB,EAHgC;AAIvC;AACAC,QAAAA,MAAM,EAAEzB;AAL+B,OAA7B,CAHE,EAUhB;AAVgB,OAWf0B,UAXe,CAWJ,EAXI,EAYhB;AACA;AAbgB,OAcfC,KAde,EAApB,CADa,CAgBb;;AACAb,MAAAA,WAAW,CAACc,IAAZ,CAAiB/B,UAAjB;AAEA,aAAOM,MAAM,CAAC0B,iBAAP,CAAyBf,WAAzB,CAAP;AACH,KA7BL,EA8BKF,IA9BL,CA8BUkB,GAAG,IAAE;AACP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCF,GAAjC;AAAsC,KAhC9C,EAiCKtB,KAjCL,CAiCWC,GAAG,IAAE;AAACsB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCvB,GAAvC;AAA4C,KAjC7D;AAkCH,GApCD;;AAsCA,sBAAQ;AAAA,2BACJ,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEJ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADI,mBAAR;AAGH,CA5DD;;KAAMhB,kB;AA6DN,eAAeA,kBAAf","sourcesContent":["\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Networks } from \"stellar-sdk\";\r\nconst TestnetTransactAPI = props => {\r\n    const StellarSdk = require(\"stellar-sdk\");\r\n    // destination account, in this case the user\r\n    const { reciever, response } = props;\r\n    // source account\r\n    const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\r\n    const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\r\n    const srcKeyPair = StellarSdk.Keypair.fromSecret(srcSecKey);\r\n    const amnt = '100.000';\r\n    // fetch base fee\r\n    const fee = StellarSdk.BASE_FEE;    \r\n    // instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\r\n    const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\r\n\r\n    // || these are deprecated, refer to: https://git.io/fj9fG\r\n    // StellarSdk.Network.usePublicNetwork();\r\n    // StellarSdk.Network.useTestNetwork();\r\n\r\n\r\n    const handleClick = e => {\r\n        // check if destination account exists\r\n        server.loadAccount(reciever)   \r\n            .catch(err=>{\r\n                if (err instanceof StellarSdk.NotFoundError) {\r\n                    throw new Error(\"destination does not exist!\");\r\n                } else return err;\r\n            })\r\n            .then(()=>{\r\n                return server.loadAccount(srcPubKey);\r\n            })\r\n            .then((srcAcct)=>{\r\n                const transaction = new StellarSdk.TransactionBuilder(\r\n                    srcAcct, { fee, networkPassphrase: Networks.TESTNET})\r\n                    // add a 'payment' operation\r\n                    .addOperation(StellarSdk.Operation.payment({\r\n                        destination: reciever,\r\n                        // need to specify 'native' so we can send Lumens\r\n                        asset: StellarSdk.Asset.native(),\r\n                        // Lumens are divisible by 7 decimal places. ex: 100.1234567\r\n                        amount: amnt,\r\n                    }),)\r\n                    // transation is valid for only 1 minute\r\n                    .setTimeout(60)\r\n                    // to add memo:\r\n                    // .addMemo(StellarSdk.Memo.text('Hello World!'))\r\n                    .build();\r\n                // source must sign the transaction with their keypair\r\n                transaction.sign(srcKeyPair);\r\n                \r\n                return server.submitTransaction(transaction);\r\n            })\r\n            .then(res=>{\r\n                // response()\r\n                console.log(\"Success! Results: \",res)})\r\n            .catch(err=>{console.log(\"Something went wrong...\", err)})\r\n    }\r\n\r\n    return (<>\r\n        <Button onClick={handleClick}>Confirm</Button>\r\n    </>)\r\n}\r\nexport default TestnetTransactAPI;"]},"metadata":{},"sourceType":"module"}