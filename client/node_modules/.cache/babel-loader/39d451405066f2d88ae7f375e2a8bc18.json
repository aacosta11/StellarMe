{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acost\\\\Desktop\\\\StellarMe\\\\client\\\\src\\\\api\\\\TestnetTransactAPI.jsx\",\n    _s = $RefreshSig$();\n\nimport StellarSdk from \"stellar-sdk\";\nimport Button from \"react-bootstrap/Button\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TestnetTransactAPI = props => {\n  _s();\n\n  // destination account, in this case the user\n  const {\n    reciever\n  } = props; // source account\n\n  const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\n  const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\n  const srcKeyPair = StellarSdk.Keypair.fromSecret(srcSecKey);\n  const amnt = '100.000'; // instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\n\n  const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\"); // StellarSdk.Network.usePublicNetwork();\n\n  StellarSdk.Network.useTestNetwork(); // transactions require valid 'sequence number' from account\n\n  const account = axios.get(server.loadAccount(srcPubKey)); // fetch base fee\n\n  const fee = axios.get(server.fetchBaseFee());\n\n  const handleClick = e => {\n    const transaction = new StellarSdk.TranactionBuilder(account, {\n      fee\n    }) // transactions can have many operations...\n    // add a 'payment' operation\n    .addOperation(StellarSdk.Operation.payment({\n      destination: reciever,\n      // need to specify 'native' so we can send Lumens\n      asset: StellarSdk.Asset.native(),\n      // Lumens are divisible by 7 decimal places. ex: 100.1234567\n      amount: amnt\n    })) // transation is valid for only 30 seconds\n    .setTimout(30) // to add memo:\n    // .addMemo(StellarSdk.Memo.text('Hello World!'))\n    .build(); // source must sign the transaction with their keypair\n\n    transaction.sign(srcKeyPair);\n    console.log(transaction.toEnvelope().toXDR('base64')); // submit transaction to Horizon server\n    // try {\n    //     const transactionRes = await server.submitTransation(transaction);\n    //     console.log(JSON.stringify(transactionRes, null, 2));\n    //     console.log('\\nSuccess! View the transaction at: ');\n    //     console.log(transactionResult._links.transaction.href);\n    // } catch (err) {\n    //     console.log('An error has occured');\n    //     console.log(err);\n    // }\n\n    const transactionRes = axios.get(server.submitTransation(transaction)).then(res => {\n      console.log(res.data, null, 2);\n    }).catch(err => console.log('An error has occurred', err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick,\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(TestnetTransactAPI, \"mf5y8VamuhfPCddlNuwNn6V+93Q=\", true);\n\n_c = TestnetTransactAPI;\nexport default TestnetTransactAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestnetTransactAPI\");","map":{"version":3,"sources":["C:/Users/acost/Desktop/StellarMe/client/src/api/TestnetTransactAPI.jsx"],"names":["StellarSdk","Button","axios","TestnetTransactAPI","props","reciever","srcPubKey","srcSecKey","srcKeyPair","Keypair","fromSecret","amnt","server","Server","Network","useTestNetwork","account","get","loadAccount","fee","fetchBaseFee","handleClick","e","transaction","TranactionBuilder","addOperation","Operation","payment","destination","asset","Asset","native","amount","setTimout","build","sign","console","log","toEnvelope","toXDR","transactionRes","submitTransation","then","res","data","catch","err"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AACA,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAAA;;AAChC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB,CAFgC,CAGhC;;AACA,QAAME,SAAS,GAAG,0DAAlB;AACA,QAAMC,SAAS,GAAG,0DAAlB;AACA,QAAMC,UAAU,GAAGR,UAAU,CAACS,OAAX,CAAmBC,UAAnB,CAA8BH,SAA9B,CAAnB;AACA,QAAMI,IAAI,GAAG,SAAb,CAPgC,CAShC;;AACA,QAAMC,MAAM,GAAG,IAAIZ,UAAU,CAACa,MAAf,CAAsB,qCAAtB,CAAf,CAVgC,CAWhC;;AACAb,EAAAA,UAAU,CAACc,OAAX,CAAmBC,cAAnB,GAZgC,CAchC;;AACA,QAAMC,OAAO,GAAGd,KAAK,CAACe,GAAN,CAAUL,MAAM,CAACM,WAAP,CAAmBZ,SAAnB,CAAV,CAAhB,CAfgC,CAiBhC;;AACA,QAAMa,GAAG,GAAGjB,KAAK,CAACe,GAAN,CAAUL,MAAM,CAACQ,YAAP,EAAV,CAAZ;;AAEA,QAAMC,WAAW,GAAGC,CAAC,IAAI;AACrB,UAAMC,WAAW,GAAG,IAAIvB,UAAU,CAACwB,iBAAf,CAAiCR,OAAjC,EAA0C;AAAEG,MAAAA;AAAF,KAA1C,EAChB;AACA;AAFgB,KAGfM,YAHe,CAGFzB,UAAU,CAAC0B,SAAX,CAAqBC,OAArB,CAA6B;AACvCC,MAAAA,WAAW,EAAEvB,QAD0B;AAEvC;AACAwB,MAAAA,KAAK,EAAE7B,UAAU,CAAC8B,KAAX,CAAiBC,MAAjB,EAHgC;AAIvC;AACAC,MAAAA,MAAM,EAAErB;AAL+B,KAA7B,CAHE,EAUhB;AAVgB,KAWfsB,SAXe,CAWL,EAXK,EAYhB;AACA;AAbgB,KAcfC,KAde,EAApB,CADqB,CAiBrB;;AACAX,IAAAA,WAAW,CAACY,IAAZ,CAAiB3B,UAAjB;AAEA4B,IAAAA,OAAO,CAACC,GAAR,CAAYd,WAAW,CAACe,UAAZ,GAAyBC,KAAzB,CAA+B,QAA/B,CAAZ,EApBqB,CAsBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMC,cAAc,GAAGtC,KAAK,CAACe,GAAN,CAAUL,MAAM,CAAC6B,gBAAP,CAAwBlB,WAAxB,CAAV,EAClBmB,IADkB,CACbC,GAAG,IAAE;AAEPP,MAAAA,OAAO,CAACC,GAAR,CAAYM,GAAG,CAACC,IAAhB,EAAsB,IAAtB,EAA4B,CAA5B;AAA+B,KAHhB,EAIlBC,KAJkB,CAIZC,GAAG,IAAEV,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCS,GAApC,CAJO,CAAvB;AAKH,GArCD;;AAuCA,sBAAQ;AAAA,2BACJ,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEzB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADI,mBAAR;AAGH,CA9DD;;GAAMlB,kB;;KAAAA,kB;AA+DN,eAAeA,kBAAf","sourcesContent":["import StellarSdk from \"stellar-sdk\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nconst TestnetTransactAPI = props => {\r\n    // destination account, in this case the user\r\n    const { reciever } = props;\r\n    // source account\r\n    const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\r\n    const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\r\n    const srcKeyPair = StellarSdk.Keypair.fromSecret(srcSecKey);\r\n    const amnt = '100.000';\r\n\r\n    // instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\r\n    const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\r\n    // StellarSdk.Network.usePublicNetwork();\r\n    StellarSdk.Network.useTestNetwork();\r\n\r\n    // transactions require valid 'sequence number' from account\r\n    const account = axios.get(server.loadAccount(srcPubKey));\r\n\r\n    // fetch base fee\r\n    const fee = axios.get(server.fetchBaseFee());\r\n\r\n    const handleClick = e => {\r\n        const transaction = new StellarSdk.TranactionBuilder(account, { fee })\r\n            // transactions can have many operations...\r\n            // add a 'payment' operation\r\n            .addOperation(StellarSdk.Operation.payment({\r\n                destination: reciever,\r\n                // need to specify 'native' so we can send Lumens\r\n                asset: StellarSdk.Asset.native(),\r\n                // Lumens are divisible by 7 decimal places. ex: 100.1234567\r\n                amount: amnt,\r\n            }))\r\n            // transation is valid for only 30 seconds\r\n            .setTimout(30)\r\n            // to add memo:\r\n            // .addMemo(StellarSdk.Memo.text('Hello World!'))\r\n            .build();\r\n\r\n        // source must sign the transaction with their keypair\r\n        transaction.sign(srcKeyPair);\r\n\r\n        console.log(transaction.toEnvelope().toXDR('base64'));\r\n\r\n        // submit transaction to Horizon server\r\n        // try {\r\n        //     const transactionRes = await server.submitTransation(transaction);\r\n        //     console.log(JSON.stringify(transactionRes, null, 2));\r\n        //     console.log('\\nSuccess! View the transaction at: ');\r\n        //     console.log(transactionResult._links.transaction.href);\r\n        // } catch (err) {\r\n        //     console.log('An error has occured');\r\n        //     console.log(err);\r\n        // }\r\n        const transactionRes = axios.get(server.submitTransation(transaction))\r\n            .then(res=>{\r\n                \r\n                console.log(res.data, null, 2)})\r\n            .catch(err=>console.log('An error has occurred',err))\r\n    }\r\n\r\n    return (<>\r\n        <Button onClick={handleClick}>Confirm</Button>\r\n    </>)\r\n}\r\nexport default TestnetTransactAPI;"]},"metadata":{},"sourceType":"module"}