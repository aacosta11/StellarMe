{"ast":null,"code":"import Button from\"react-bootstrap/Button\";import{Networks}from\"stellar-sdk\";import{jsx as _jsx}from\"react/jsx-runtime\";var TestnetTransactAPI=function TestnetTransactAPI(props){var srcSecret=props.srcSecret,amnt=props.amnt,reciever=props.reciever,response=props.response;var StellarSdk=require(\"stellar-sdk\");var fee=StellarSdk.BASE_FEE;var server=new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");// test source account\n// const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\n// const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\nvar srcKeyPair,srcPubKey;// instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\ntry{srcKeyPair=StellarSdk.Keypair.fromSecret(srcSecret);srcPubKey=srcKeyPair.publicKey();}catch(_unused){console.log(\"no keypair found\");}var handleClick=function handleClick(e){console.log(\"Fee: \",fee+\" Stroops\");console.log(\"source key: \",srcSecret);if(!srcPubKey){return console.log(\"no source key found\");}console.log('initiated transaction...');// check if destination account exists\nserver.loadAccount(reciever).catch(function(err){if(err instanceof StellarSdk.NotFoundError){throw new Error(\"destination does not exist!\");}else return console.log(\"error!\");}).then(function(){return server.loadAccount(srcPubKey);}).then(function(srcAcct){var transaction=new StellarSdk.TransactionBuilder(srcAcct,{fee:fee,networkPassphrase:Networks.TESTNET})// add a 'payment' operation\n.addOperation(StellarSdk.Operation.payment({destination:reciever,// need to specify 'native' so we can send Lumens\nasset:StellarSdk.Asset.native(),// Lumens are divisible by 7 decimal places. ex: 100.1234567\namount:amnt}))// transation is valid for only 1 minute\n.setTimeout(60)// to add memo:\n// .addMemo(StellarSdk.Memo.text('Hello World!'))\n.build();// source must sign the transaction with their keypair\ntransaction.sign(srcKeyPair);return server.submitTransaction(transaction);}).then(function(res){response(amnt);console.log(\"Success! Results: \",res);}).catch(function(err){console.log(\"Something went wrong...\",err);});};return/*#__PURE__*/_jsx(Button,{onClick:handleClick,children:\"Confirm\"});};export default TestnetTransactAPI;","map":{"version":3,"sources":["C:/Users/acost/Desktop/StellarMe/client/src/api/TestnetTransactAPI.jsx"],"names":["Button","Networks","TestnetTransactAPI","props","srcSecret","amnt","reciever","response","StellarSdk","require","fee","BASE_FEE","server","Server","srcKeyPair","srcPubKey","Keypair","fromSecret","publicKey","console","log","handleClick","e","loadAccount","catch","err","NotFoundError","Error","then","srcAcct","transaction","TransactionBuilder","networkPassphrase","TESTNET","addOperation","Operation","payment","destination","asset","Asset","native","amount","setTimeout","build","sign","submitTransaction","res"],"mappings":"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","sourcesContent":["import Button from \"react-bootstrap/Button\";\nimport { Networks } from \"stellar-sdk\";\n\nconst TestnetTransactAPI = props => {\n    const { srcSecret, amnt, reciever, response } = props;\n    const StellarSdk = require(\"stellar-sdk\");\n    const fee = StellarSdk.BASE_FEE;    \n    const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\");\n    // test source account\n    // const srcPubKey = 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV';\n    // const srcSecKey = 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN';\n    \n    var srcKeyPair,srcPubKey;\n\n\n    // instantiate horizon instance from stellar.org. the live network is \"horizon.stellar.org\"\n    try {\n        srcKeyPair = StellarSdk.Keypair.fromSecret(srcSecret);\n        srcPubKey = srcKeyPair.publicKey();\n    }\n    catch {\n        console.log(\"no keypair found\");\n    }\n\n    const handleClick = e => {\n        console.log(\"Fee: \",fee + \" Stroops\");\n        console.log(\"source key: \",srcSecret);\n        if (!srcPubKey){return console.log(\"no source key found\")}\n        console.log('initiated transaction...');\n\n        // check if destination account exists\n        server.loadAccount(reciever)\n            .catch(err=>{\n                if (err instanceof StellarSdk.NotFoundError) {\n                    throw new Error(\"destination does not exist!\");\n                } else return console.log(\"error!\");\n            })\n            .then(()=>{\n                return server.loadAccount(srcPubKey);\n            })\n            .then((srcAcct)=>{\n                const transaction = new StellarSdk.TransactionBuilder(\n                    srcAcct, { fee, networkPassphrase: Networks.TESTNET})\n                    // add a 'payment' operation\n                    .addOperation(StellarSdk.Operation.payment({\n                        destination: reciever,\n                        // need to specify 'native' so we can send Lumens\n                        asset: StellarSdk.Asset.native(),\n                        // Lumens are divisible by 7 decimal places. ex: 100.1234567\n                        amount: amnt,\n                    }),)\n                    // transation is valid for only 1 minute\n                    .setTimeout(60)\n                    // to add memo:\n                    // .addMemo(StellarSdk.Memo.text('Hello World!'))\n                    .build();\n                // source must sign the transaction with their keypair\n                transaction.sign(srcKeyPair);\n                \n                return server.submitTransaction(transaction);\n            })\n            .then(res=>{\n                response(amnt);\n                console.log(\"Success! Results: \",res);})\n            .catch(err=>{console.log(\"Something went wrong...\", err)})\n    }\n\n    return <Button onClick={handleClick}>Confirm</Button>\n}\nexport default TestnetTransactAPI;"]},"metadata":{},"sourceType":"module"}