[{"C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\index.js":"1","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\App.js":"2","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\reportWebVitals.js":"3","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\pages\\NewUserPage.jsx":"4","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\pages\\HomePage.jsx":"5","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\pages\\LoginPage.jsx":"6","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\pages\\testnet\\TestnetDashPage.jsx":"7","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\SectionOneComp.jsx":"8","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\loginpage\\RegisterFormComp.jsx":"9","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\WelcomeComp.jsx":"10","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\NavBarComp.jsx":"11","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\Section2Comp.jsx":"12","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\Section3Comp.jsx":"13","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\loginpage\\ExistingFormComp.jsx":"14","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\makeNewKeysAPI.jsx":"15","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\MakeNewKeysAPI.jsx":"16","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\TestnetGetTransactionsComp.jsx":"17","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\TestNetGetAccountAPI.jsx":"18","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\TestnetTransactAPI.jsx":"19"},{"size":638,"mtime":1637306132000,"results":"20","hashOfConfig":"21"},{"size":892,"mtime":1637306132000,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1637306132000,"results":"23","hashOfConfig":"21"},{"size":412,"mtime":1637306132000,"results":"24","hashOfConfig":"21"},{"size":583,"mtime":1637306132000,"results":"25","hashOfConfig":"21"},{"size":371,"mtime":1637306132000,"results":"26","hashOfConfig":"21"},{"size":9212,"mtime":1637306132000,"results":"27","hashOfConfig":"21"},{"size":1456,"mtime":1637306132000,"results":"28","hashOfConfig":"21"},{"size":7893,"mtime":1637306132000,"results":"29","hashOfConfig":"21"},{"size":797,"mtime":1637306132000,"results":"30","hashOfConfig":"21"},{"size":2557,"mtime":1637471070025,"results":"31","hashOfConfig":"21"},{"size":410,"mtime":1637306132000,"results":"32","hashOfConfig":"21"},{"size":212,"mtime":1637306132000,"results":"33","hashOfConfig":"21"},{"size":4387,"mtime":1637306132000,"results":"34","hashOfConfig":"21"},{"size":1098,"mtime":1637177346406,"results":"35","hashOfConfig":"21"},{"size":1482,"mtime":1637306132000,"results":"36","hashOfConfig":"21"},{"size":563,"mtime":1637193493533,"results":"37","hashOfConfig":"21"},{"size":472,"mtime":1637306132000,"results":"38","hashOfConfig":"21"},{"size":2856,"mtime":1637306132000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1ishys7",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\index.js",[],["91","92"],"C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\App.js",[],"C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\reportWebVitals.js",[],"C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\pages\\NewUserPage.jsx",["93","94"],"import React from \"react\";\nimport RegisterFormComp from \"../components/loginpage/RegisterFormComp\";\nimport NavBarComp from \"../components/homepage/NavBarComp\";\nimport { Link } from \"react-router-dom\";\nexport default props => {\n    const handleResponse = res => {\n        console.log(res)\n    }\n    return (\n        <>\n        <NavBarComp />\n        <RegisterFormComp submit={handleResponse}/>\n        </>\n    )\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\pages\\HomePage.jsx",["95"],"import React from \"react\";\nimport NavBarComp from \"../components/homepage/NavBarComp\";\nimport WelcomeComp from \"../components/homepage/WelcomeComp\";\nimport SectionOneComp from \"../components/homepage/SectionOneComp\";\nimport Section2Comp from \"../components/homepage/Section2Comp\";\nimport Section3Comp from \"../components/homepage/Section3Comp\";\nimport \"../styles/pageStyles/homeStyle.css\"\nexport default props => {\n    return (\n        <>\n        <NavBarComp />\n        <WelcomeComp />\n        <SectionOneComp /> \n        <Section2Comp />\n        <Section3Comp />\n        </>\n    )\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\pages\\LoginPage.jsx",["96"],"import React from \"react\";\nimport ExistingFormComp from \"../components/loginpage/ExistingFormComp\";\nimport NavBarComp from \"../components/homepage/NavBarComp\";\nexport default props => {\n    const handleResponse = res => {\n        console.log(res)\n    }\n    return (\n        <>\n        <NavBarComp />\n        <ExistingFormComp submit={handleResponse}/>\n        </>\n    )\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\pages\\testnet\\TestnetDashPage.jsx",["97","98","99"],"import \"../../styles/pageStyles/testDashStyle.css\";\nimport TestnetGetAccountAPI from \"../../api/TestNetGetAccountAPI\";\nimport NavBarComp from \"../../components/homepage/NavBarComp\";\nimport TestnetTransactAPI from \"../../api/TestnetTransactAPI\";\nimport MakeNewKeysAPI from \"../../api/MakeNewKeysAPI.jsx\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default props => {\n    const StellarSdk = require(\"stellar-sdk\");\n    const fee = StellarSdk.BASE_FEE * 0.0000001; // fee counted in Stroops; 100 Stroops = 0.00001 XLM \n    const [keyPair, setKeyPair] = useState({ // guest1 KEY PAIR\n        'public': 'GBSN5LZY5BMBJ5J3QWRYY7WAOYG3DVRCK76PN4MR3E7GBQBINGO3SGTV',\n        'private': 'SD7MGXUGVAQVJVKCBZSK4GHGRQYS67X4F4KU6T7P7EAVP7Y3CMCDZTTN' });\n    const [keyPair2,setKeyPair2] = useState({ // guest2 KEY PAIR\n        'public':'GDQI2XSDRTOQPKUQATVKZHZ3HZNN33KRSKG5M2M4F7SW3XCU54PI7H6O',\n        'private':'SALV2QXVIWFTISFIJWPB3KOXDPQBLWJVZMCH545Q6GL4UHPTSEQ22UFW'});\n    const [balance, setBalance] = useState(0); // guest1 BALANCE\n    const [balance2, setBalance2] = useState(0); // guest2 BALANCE\n    const guest1 = 'guest982'; // guest1 NAME\n    const guest2 = 'guest321'; // guest2 NAME\n    const [slots,setSlots] = useState({ // placement for trade demo\n        0:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance},\n        1:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2}});\n    const [tradeAmnt,setTradeAmnt] = useState(0); // number of XLM transferred\n    useEffect(()=>{ // useEffects update balances shown on the trade demo\n        slots[0].name === guest1 ?\n        setSlots({...slots,0:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance}})\n        :\n        setSlots({...slots,1:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance}})\n    }, [balance])\n    useEffect(()=>{\n        slots[0].name === guest2 ?\n        setSlots({...slots,0:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2}})\n        :\n        setSlots({...slots,1:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2}})\n    }, [balance2])\n    const generateNewKeys = res => {setKeyPair({...res});} // replace current keypairs with new ones\n    const generateNewKeys2 = res => {setKeyPair2({...res});}\n    const handleAccountReport = res => { // fetch balance from Horizon API\n        setBalance(res);}\n    const handleAccountReport2 = res => {\n        setBalance2(res);}\n    const handleTransaction2 = res => { // update balances from individual transactions\n        setBalance2((((parseFloat(balance2) + parseFloat(res)) * 100) / 100).toFixed(7));}\n    const handleTransaction = res => {\n        setBalance((((parseFloat(balance) + parseFloat(res)) * 100) / 100).toFixed(7));}\n    const handleSwapSlots = () => { // swap guest placements for trade demo; swapping sender and reciever.\n        if (slots[0].name === guest1) {\n            setSlots({0:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2},\n            1:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance}})} \n        else {\n            setSlots({0:{'name':guest1,'public':keyPair.public,'private':keyPair.private,'balance':balance},\n            1:{'name':guest2,'public':keyPair2.public,'private':keyPair2.private,'balance':balance2}})}\n    }\n    const handleTradeDemo = res => { // update balances after trade demo\n        console.log(res);\n        slots[0].name === guest1 ?\n        <>\n        {setBalance((((parseFloat(balance) - parseFloat(res) - fee) * 100) / 100).toFixed(7))}\n        {setBalance2((((parseFloat(balance2) + parseFloat(res)) * 100) / 100).toFixed(7))}\n        </>\n        :\n        <>\n        {setBalance((((parseFloat(balance) + parseFloat(res)) * 100) / 100).toFixed(7))}\n        {setBalance2((((parseFloat(balance2) - parseFloat(res) - fee) * 100) / 100).toFixed(7))}\n        </>\n    }\n    return (\n        <>\n            <TestnetGetAccountAPI pubKey={keyPair2.public} response={handleAccountReport2} />\n            <TestnetGetAccountAPI pubKey={keyPair.public} response={handleAccountReport} />\n            <div className=\"testdashwrap\">\n                <div className=\"testdashtopfill\">\n                    <h1>Welcome, guest!</h1>\n                </div>\n                <NavBarComp />\n\n                {/* key pair for guest1 */}\n                <div className=\"addresses testusercard\">\n                    <div className=\"hr hr-t\" />\n                    <h2>@{guest1}'s testnet key pair:</h2>\n                    {/* public */}\n                    <h6>public: </h6>\n                    {keyPair.public.length === 0 ?\n                        <p>none</p>\n                        : <div className=\"testkey\">{keyPair.public}</div>}\n                    {/* private */}\n                    <h6>private: </h6>\n                    {keyPair.private.length === 0 ?\n                        <p>none</p>\n                        : <div className=\"testkey\">{keyPair.private}</div>}\n                    <MakeNewKeysAPI response={generateNewKeys} className=\"newkeysplz\" />\n                    <div className=\"hr hr-b\" />\n                </div>\n\n                {/* key pair for guest2 */}\n                <div className=\"addresses testusercard\">\n                    <div className=\"hr hr-t\" />\n                    <h2>@{guest2}'s testnet key pair:</h2>\n                    {/* public */}\n                    <h6>public: </h6>\n                    {keyPair2.public.length === 0 ?\n                        <p>none</p>\n                        : <div className=\"testkey\">{keyPair2.public}</div>}\n                    {/* private */}\n                    <h6>private: </h6>\n                    {keyPair2.private.length === 0 ?\n                        <p>none</p>\n                        : <div className=\"testkey\">{keyPair2.private}</div>}\n                    <MakeNewKeysAPI response={generateNewKeys2} className=\"newkeysplz\" />\n                    <div className=\"hr hr-b\" />\n                </div>\n\n                {/* balance for guest1 */}\n                <div className=\"testusercard testnetaccountinfo\">\n                    <div className=\"hr hr-t\" />\n                    <h2>Balance for @{guest1}</h2>\n                    {keyPair.public.length !== 0 ?\n                    <>\n                    <div>{balance} XLM</div>\n                    <h3>add 100 XML to your balance?</h3>\n                    <TestnetTransactAPI reciever={keyPair.public} response={handleTransaction} amnt='100'\n                    srcSecret={'SA4JSHUECQ4S5ECT6LGSMQPM467CDNBNAGBVFMDCNSMYUJW3ZXQNWE5O'}/>\n                    </>\n                    : <p>Generate Key Pairs!</p>}\n                    <div className=\"hr hr-b\" />\n                </div>\n\n                {/* balance for guest2 */}\n                <div className=\"testusercard testnetaccountinfo\">\n                    <div className=\"hr hr-t\" />\n                    <h2>Balance for @{guest2}</h2>\n                    {keyPair2.public.length !== 0 ?\n                    <>\n                    <div>{balance2} XLM</div>\n                    <h3>add 100 XML to your balance?</h3>\n                    <TestnetTransactAPI reciever={keyPair2.public} response={handleTransaction2} amnt='100' \n                    srcSecret={'SA4JSHUECQ4S5ECT6LGSMQPM467CDNBNAGBVFMDCNSMYUJW3ZXQNWE5O'}/>\n                    </>\n                    : <p>Generate Key Pairs!</p>}\n                    <div className=\"hr hr-b\" />\n                </div>\n\n                {/* make a trade */}\n                <div className=\"testusercard testnettransactpreview\">\n                    <div className=\"hr hr-t\" />\n                    <h2>Make A Trade!</h2>\n                    <div>@{slots[0].name} Balance: XLM {slots[0].balance}</div>\n                    <InputGroup className=\"mb-3\">\n                        <FormControl\n                            min=\"1\"\n                            type=\"number\"\n                            value={tradeAmnt}\n                            onChange={e=>setTradeAmnt(e.target.value)}\n                            aria-label=\"Default\"\n                            aria-describedby=\"inputGroup-sizing-default\"/>\n                    <InputGroup.Text id=\"inputGroup-sizing-default\">XLM</InputGroup.Text>\n                    <Button onClick={handleSwapSlots}>swap</Button>\n                    </InputGroup>\n                    <div>@{slots[1].name} Balance: XLM {slots[1].balance}</div>\n                    {keyPair.public.length < 1 || keyPair2.public.length < 1 ?\n                    <h3>Generate Key Pairs First!</h3>\n                    :\n                    <TestnetTransactAPI \n                    srcSecret={slots[0].private}\n                    amnt={tradeAmnt}\n                    reciever={slots[1].public}\n                    response={handleTradeDemo}\n                    />}\n                    <div className=\"hr hr-b\" />\n                </div>\n            </div>\n        </>\n    )\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\SectionOneComp.jsx",["100"],"import React from \"react\";\nimport Carousel from 'react-bootstrap/Carousel'\nimport \"../../styles/compStyles/section1Style.css\";\nexport default props => {\n\n    return (\n        <>\n            <div className=\"sec1container\">\n            <Carousel fade className=\"carousel1\">\n                <Carousel.Item>\n                    {/* img can go here */}\n                    <div className=\"carouselslide\"></div>\n                    <Carousel.Caption>\n                        <h3>First slide label</h3>\n                        <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\n                    </Carousel.Caption>\n                </Carousel.Item>\n                <Carousel.Item>\n                    {/* img can go here */}\n                    <div className=\"carouselslide\"></div>\n                    <Carousel.Caption>\n                        <h3>Second slide label</h3>\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                    </Carousel.Caption>\n                </Carousel.Item>\n                <Carousel.Item>\n                    <div className=\"carouselslide\"></div>\n                    <Carousel.Caption>\n                        <h3>Third slide label</h3>\n                        <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\n                    </Carousel.Caption>\n                </Carousel.Item>\n            </Carousel>\n            </div>\n        </>\n    )\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\loginpage\\RegisterFormComp.jsx",["101","102","103"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Form from \"react-bootstrap/Form\";\nimport { Formik } from \"formik\";\nimport * as yup from 'yup';\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../../styles/compStyles/registerFormStyle.css\";\nimport { scryRenderedDOMComponentsWithClass } from \"react-dom/cjs/react-dom-test-utils.development\";\n\nexport default props => {\n    const { submit } = props;\n    const schema = yup.object().shape({\n        firstName: yup.string().required(),\n        lastName: yup.string().required(),\n        email: yup.string().required(),\n        username: yup.string().required(),\n        password: yup.string().required(),\n        terms: yup.bool().required().oneOf([true], 'Terms must be accepted'),\n    });\n    const handleSubmit = e => {\n        console.log(e.email)\n        submit('submitted')\n    }\n    return (\n        <>\n            <div className=\"formwrap\">\n                <h1>Register</h1>\n                <p>&nbsp;</p>\n                <Formik\n                    validationSchema={schema}\n                    onSubmit={(e) => handleSubmit(e)}\n                    initialValues={{\n                        firstName: 'Rod',\n                        lastName: 'Wave',\n                        email: '',\n                        username: '',\n                        password: '',\n                        terms: false,\n                    }}>\n                    {({\n                        handleSubmit,\n                        handleChange,\n                        handleBlur,\n                        values,\n                        touched,\n                        isValid,\n                        errors,\n                    }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                            <Row className=\"align-items-center\">\n                                <Form.Group as={Col} md=\"4\" controlId=\"validationFormik01\">\n                                    <Form.Label>First name</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"firstName\"\n                                        value={values.firstName}\n                                        onChange={handleChange}\n                                        isValid={touched.firstName && !errors.firstName} />\n                                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                </Form.Group>\n                            </Row>\n                            <Row>\n                                <Form.Group as={Col} md=\"4\" controlId=\"validationFormik02\">\n                                    <Form.Label>Last name</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        name=\"lastName\"\n                                        value={values.lastName}\n                                        onChange={handleChange}\n                                        isValid={touched.lastName && !errors.lastName} />\n                                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                </Form.Group>\n                            </Row>\n                            <Row>\n                                <Form.Group as={Col} md=\"4\" controlId=\"validationFormikUsername\">\n                                    <Form.Label>Username</Form.Label>\n                                    <InputGroup hasValidation>\n                                        <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                        <Form.Control\n                                            type=\"text\"\n                                            placeholder=\"Username\"\n                                            aria-describedby=\"inputGroupPrepend\"\n                                            name=\"username\"\n                                            value={values.username}\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.username} />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.username}\n                                        </Form.Control.Feedback>\n                                    </InputGroup>\n                                </Form.Group>\n                            </Row>\n                            <Row>\n                                <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\n                                    <Form.Label>Email</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Email\"\n                                        name=\"email\"\n                                        value={values.email}\n                                        onChange={handleChange}\n                                        isInvalid={!!errors.email} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.email}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Row>\n                            <Row>\n                                <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Password\"\n                                        name=\"password\"\n                                        value={values.password}\n                                        onChange={handleChange}\n                                        isInvalid={!!errors.password} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.password}\n                                    </Form.Control.Feedback>\n                                    <Form.Text id=\"passwordHelpBlock\" muted>\n                                        Your password must be 8-20 characters long, contain letters and numbers, and\n                                        must not contain spaces, special characters, or emoji.\n                                    </Form.Text>\n                                </Form.Group>\n                            </Row>\n                            <Row className=\"align-items-center\">\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Check\n                                        required\n                                        name=\"terms\"\n                                        label=\"Agree to terms and conditions\"\n                                        onChange={handleChange}\n                                        isInvalid={!!errors.terms}\n                                        feedback={errors.terms}\n                                        feedbackType=\"invalid\"\n                                        id=\"validationFormik0\" />\n                                </Form.Group>\n                            </Row>\n                            <Button type=\"submit\">Submit</Button>\n                            <p>&nbsp;</p>\n                            <Link to=\"/login\">Already have an account?</Link>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        </>\n    );\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\WelcomeComp.jsx",["104"],"import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport \"../../styles/compStyles/welcomeStyle.css\";\nexport default props => {\n    return (\n        <>\n            <div className=\"welcomewrap\">\n                <div className=\"welcomelogowrap\">\n                    <div style={{ \"height\": \"100px\", \"width\": \"100px\", \"border\": \"3px solid black\",\"backgroundColor\":\"grey\" }}>\n                    </div>\n                </div>\n                <div className=\"welcomebtns\">\n                    <Button variant=\"primary\" size=\"md\">\n                        Get Started\n                    </Button>\n                    <Button variant=\"secondary\" size=\"md\">\n                        Learn More\n                    </Button>\n                </div>\n            </div>\n        </>\n    )\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\NavBarComp.jsx",["105"],"C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\Section2Comp.jsx",["106"],"import React from \"react\";\nimport \"../../styles/compStyles/section2Style.css\";\nexport default props => {\n    return (\n        <>\n        <div className=\"sec2container\">\n            <p className=\"sec2text\">\n            Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            Ducimus possimus et eveniet, voluptates facilis minus corporis tempora.\n            </p>\n        </div>\n        </>\n    )\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\homepage\\Section3Comp.jsx",["107"],"import React from \"react\";\nimport \"../../styles/compStyles/section3Style.css\";\nexport default props => {\n    return (\n        <>\n        <div className=\"sec3container\">\n        \n        </div>\n        </>\n    )\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\components\\loginpage\\ExistingFormComp.jsx",["108","109","110","111"],"import React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Form from \"react-bootstrap/Form\";\nimport { Formik } from \"formik\";\nimport * as yup from 'yup';\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../../styles/compStyles/registerFormStyle.css\";\n\nexport default props => {\n    const { submit } = props;\n    const [user, setUser] = useState('');\n\n    const schema = yup.object().shape({\n        username: yup.string().required(),\n        password: yup.string().required(),\n    });\n    const handleSubmit = e => {\n        console.log(e)\n        submit(\"submitted\");\n    }\n\n    return (\n        <>\n            <div className=\"formwrap\">\n                <h1>Log In</h1>\n                <p>&nbsp;</p>\n                <Formik\n                    validationSchema={schema}\n                    onSubmit={(e) => handleSubmit(e)}\n                    initialValues={{\n                        username: '',\n                        password: '',\n                    }}>\n                    {({\n                        handleSubmit,\n                        handleChange,\n                        handleBlur,\n                        values,\n                        touched,\n                        isValid,\n                        errors,\n                    }) => (\n                        <Form noValidate onSubmit={handleSubmit}>\n                            <Row>\n                                <Form.Group as={Col} md=\"4\" controlId=\"validationFormikUsername\">\n                                    <Form.Label>Username</Form.Label>\n                                    <InputGroup hasValidation>\n                                        <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                        <Form.Control\n                                            type=\"text\"\n                                            placeholder=\"Username\"\n                                            aria-describedby=\"inputGroupPrepend\"\n                                            name=\"username\"\n                                            value={values.username}\n                                            onChange={handleChange}\n                                            isInvalid={!!errors.username} />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors.username}\n                                        </Form.Control.Feedback>\n                                    </InputGroup>\n                                </Form.Group>\n                            </Row>\n                            <Row className=\"align-items-center\">\n                                <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Password\"\n                                        name=\"password\"\n                                        value={values.password}\n                                        onChange={handleChange}\n                                        isInvalid={!!errors.password} />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {errors.password}\n                                    </Form.Control.Feedback>\n                                    <Form.Text id=\"passwordHelpBlock\" muted>\n                                        Your password must be 8-20 characters long, contain letters and numbers, and\n                                        must not contain spaces, special characters, or emoji.\n                                    </Form.Text>\n                                </Form.Group>\n                            </Row>\n                            <p>&nbsp;</p>\n                            <Button type=\"submit\">Submit</Button>\n                            <p>&nbsp;</p>\n                            <Link to=\"/login/new\">Don't have an account?</Link>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        </>\n    );\n}","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\makeNewKeysAPI.jsx",["112","113","114","115","116","117"],"C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\MakeNewKeysAPI.jsx",["118","119"],"import axios from \"axios\";\nimport StellarSdk from \"stellar-sdk\";\nimport Button from \"react-bootstrap/Button\";\nexport default props => {\n    const { response } = props;\n    const server = new StellarSdk.Server(\"https://horizon-testnet.stellar.org\"); // connect to Horizon API\n\n    // pair.secret();\n    // pair.publicKey();\n    \n    // console.log(pair.canSign());\n    // console.log('public: ')\n    // console.log(pair.publicKey());\n    // console.log('secret: ')\n    // console.log(pair.secret());\n    const request = () => {\n        const pair = StellarSdk.Keypair.random(); // generate a new key pair\n        console.log(\"public key: \",pair.publicKey());\n        console.log(\"private key: \",pair.secret());\n        // testnet faucet; funds account with 10000 XLM and \n        axios.get(`https://friendbot.stellar.org?addr=${encodeURIComponent( \n            pair.publicKey(),\n        )}`)\n            .then(res => {\n                response({'public':pair.publicKey(),'private':pair.secret()}) // send response to parent component\n                console.log(\"SUCCESS! You have a new account :)\\n\", res.data)\n            })\n            .catch(err => console.log(\"error while creating account, \", err))\n    }\n    const handleClick = () => {\n        request();\n    }\n    return <Button onClick={handleClick}>Generate New Keys</Button>\n}\n\n// public: \n// GDQI2XSDRTOQPKUQATVKZHZ3HZNN33KRSKG5M2M4F7SW3XCU54PI7H6O\n\n// private:\n// SALV2QXVIWFTISFIJWPB3KOXDPQBLWJVZMCH545Q6GL4UHPTSEQ22UFW","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\TestnetGetTransactionsComp.jsx",["120","121","122"],"C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\TestNetGetAccountAPI.jsx",["123"],"import axios from \"axios\";\nimport { useEffect } from \"react\";\nconst TestnetGetAccountAPI = props => {\n    const { response, pubKey } = props;\n    useEffect(()=>{\n        axios.get(`https://horizon-testnet.stellar.org/accounts/${pubKey}`)\n            .then(res=>{\n                response(res.data.balances[0].balance)\n                console.log(res.data)})\n            .catch(err=>{console.log(err)})\n    },[pubKey])\n    return null\n}\nexport default TestnetGetAccountAPI;","C:\\Users\\acost\\Desktop\\StellarMe\\client\\src\\api\\TestnetTransactAPI.jsx",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":14},{"ruleId":"132","severity":1,"message":"133","line":5,"column":1,"nodeType":"134","endLine":15,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":8,"column":1,"nodeType":"134","endLine":18,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":4,"column":1,"nodeType":"134","endLine":14,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":11,"column":1,"nodeType":"134","endLine":178,"endColumn":2},{"ruleId":"135","severity":1,"message":"136","line":33,"column":8,"nodeType":"137","endLine":33,"endColumn":17,"suggestions":"138"},{"ruleId":"135","severity":1,"message":"139","line":39,"column":8,"nodeType":"137","endLine":39,"endColumn":18,"suggestions":"140"},{"ruleId":"132","severity":1,"message":"133","line":4,"column":1,"nodeType":"134","endLine":37,"endColumn":2},{"ruleId":"128","severity":1,"message":"141","line":9,"column":8,"nodeType":"130","messageId":"131","endLine":9,"endColumn":19},{"ruleId":"128","severity":1,"message":"142","line":12,"column":10,"nodeType":"130","messageId":"131","endLine":12,"endColumn":44},{"ruleId":"132","severity":1,"message":"133","line":14,"column":1,"nodeType":"134","endLine":153,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":4,"column":1,"nodeType":"134","endLine":23,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":5,"column":1,"nodeType":"134","endLine":55,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":3,"column":1,"nodeType":"134","endLine":14,"endColumn":2},{"ruleId":"132","severity":1,"message":"133","line":3,"column":1,"nodeType":"134","endLine":11,"endColumn":2},{"ruleId":"128","severity":1,"message":"141","line":9,"column":8,"nodeType":"130","messageId":"131","endLine":9,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":13,"column":1,"nodeType":"134","endLine":96,"endColumn":2},{"ruleId":"128","severity":1,"message":"143","line":15,"column":12,"nodeType":"130","messageId":"131","endLine":15,"endColumn":16},{"ruleId":"128","severity":1,"message":"144","line":15,"column":18,"nodeType":"130","messageId":"131","endLine":15,"endColumn":25},{"ruleId":"145","severity":2,"message":"146","line":5,"column":16,"nodeType":"130","messageId":"147","endLine":5,"endColumn":35},{"ruleId":"128","severity":1,"message":"148","line":7,"column":12,"nodeType":"130","messageId":"131","endLine":7,"endColumn":19},{"ruleId":"128","severity":1,"message":"149","line":7,"column":20,"nodeType":"130","messageId":"131","endLine":7,"endColumn":30},{"ruleId":"150","severity":2,"message":"151","line":7,"column":34,"nodeType":"130","endLine":7,"endColumn":42},{"ruleId":"128","severity":1,"message":"152","line":19,"column":11,"nodeType":"130","messageId":"131","endLine":19,"endColumn":18},{"ruleId":"128","severity":1,"message":"153","line":29,"column":11,"nodeType":"130","messageId":"131","endLine":29,"endColumn":26},{"ruleId":"132","severity":1,"message":"133","line":4,"column":1,"nodeType":"134","endLine":34,"endColumn":2},{"ruleId":"128","severity":1,"message":"154","line":6,"column":11,"nodeType":"130","messageId":"131","endLine":6,"endColumn":17},{"ruleId":"128","severity":1,"message":"155","line":4,"column":12,"nodeType":"130","messageId":"131","endLine":4,"endColumn":16},{"ruleId":"128","severity":1,"message":"156","line":4,"column":17,"nodeType":"130","messageId":"131","endLine":4,"endColumn":24},{"ruleId":"135","severity":1,"message":"157","line":12,"column":8,"nodeType":"137","endLine":12,"endColumn":10,"suggestions":"158"},{"ruleId":"135","severity":1,"message":"159","line":11,"column":7,"nodeType":"137","endLine":11,"endColumn":15,"suggestions":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'keyPair.private', 'keyPair.public', and 'slots'. Either include them or remove the dependency array. You can also do a functional update 'setSlots(s => ...)' if you only need 'slots' in the 'setSlots' call.","ArrayExpression",["163"],"React Hook useEffect has missing dependencies: 'keyPair2.private', 'keyPair2.public', and 'slots'. Either include them or remove the dependency array. You can also do a functional update 'setSlots(s => ...)' if you only need 'slots' in the 'setSlots' call.",["164"],"'FormControl' is defined but never used.","'scryRenderedDOMComponentsWithClass' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","no-undef","'generateTestKeyPair' is not defined.","undef","'newPair' is assigned a value but never used.","'setNewPair' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"generateTestKeyPair\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","'request' is assigned a value but never used.","'getTransactions' is assigned a value but never used.","'server' is assigned a value but never used.","'acct' is assigned a value but never used.","'setAcct' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'server'. Either include it or remove the dependency array.",["165"],"React Hook useEffect has a missing dependency: 'response'. Either include it or remove the dependency array.",["166"],"no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},"Update the dependencies array to be: [balance, keyPair.private, keyPair.public, slots]",{"range":"175","text":"176"},"Update the dependencies array to be: [balance2, keyPair2.private, keyPair2.public, slots]",{"range":"177","text":"178"},"Update the dependencies array to be: [server]",{"range":"179","text":"180"},"Update the dependencies array to be: [pubKey, response]",{"range":"181","text":"182"},[2054,2063],"[balance, keyPair.private, keyPair.public, slots]",[2373,2383],"[balance2, keyPair2.private, keyPair2.public, slots]",[496,498],"[server]",[408,416],"[pubKey, response]"]